name: Stock Scanner V2 (Telegram)

on:
  workflow_dispatch:
    inputs:
      RUN_AFTER_HOURS:
        type: boolean
        description: "Allow running outside US market hours?"
        default: false
      ALWAYS_NOTIFY:
        type: boolean
        description: "Send a summary even if there are no NEW alerts?"
        default: false
      PING_ON_START:
        type: boolean
        description: "Send a startup ping?"
        default: false
      PING_ON_END:
        type: boolean
        description: "Send a completion ping?"
        default: false
      TICKERS:
        type: string
        description: "Optional override list (comma/space/semicolon/pipe separated)"
        default: ""
      PROFILE:
        type: choice
        description: "Preset"
        options:
          - balanced
          - conservative
          - aggressive
        default: balanced
      ADVANCED_JSON:
        type: string
        description: >
          Optional overrides as JSON. Any keys here replace the preset values.
          Example:
          {"ENABLE_4H":true,"ENFORCE_4H_ANCHORED_VWAP":true,"REGIME_SYMBOL":"SPY",
           "REGIME_DOWNGRADE_TO_WATCH":true,"MIN_20D_DOLLAR_VOL":5000000,
           "VOL_UP_LOOKBACK":10,"VOL_UP_MULT":1.2,"BUY_LOWER_BAND_ATR_MULT":0.5,
           "BUY_UPPER_BAND_ATR_MULT":0.25,"MIN_RR":1.5,"DIV_MIN":2}
        default: ""
  # Every 50 minutes on weekdays (UTC)
  schedule:
    - cron: "*/50 * * * 1-5"

concurrency:
  group: stock-scanner
  cancel-in-progress: false

jobs:
  scan:
    runs-on: ubuntu-latest
    timeout-minutes: 12
    env:
      TZ: America/New_York

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy yfinance requests certifi
          fi

      # Default: skip runs outside US RTH unless user allows after-hours
      - name: Skip outside US RTH (unless overridden)
        run: |
          if [ "${{ inputs.RUN_AFTER_HOURS }}" != "true" ]; then
            now=$(TZ=America/New_York date +%H%M)
            dow=$(TZ=America/New_York date +%u)
            if [ "$dow" -ge 6 ] || [ "$now" -lt 0930 ] || [ "$now" -gt 1600 ]; then
              echo "Outside US RTH — exiting."
              exit 0
            fi
          fi

      # ---- Build PRESET from PROFILE and merge ADVANCED_JSON, then export to env ----
      - name: Expand PROFILE/ADVANCED_JSON → env
        shell: bash
        env:
          PROFILE: ${{ inputs.PROFILE }}
          ADVANCED_JSON: ${{ inputs.ADVANCED_JSON }}
        run: |
          python - <<'PY'
          import os, json, sys

          profile = (os.environ.get("PROFILE","balanced") or "balanced").strip().lower()

          # --- presets ---
          presets = {
            "balanced": {
              "ENABLE_4H": True, "ENFORCE_4H_ANCHORED_VWAP": True,
              "REGIME_SYMBOL": "SPY", "REGIME_DOWNGRADE_TO_WATCH": True,
              "MIN_20D_DOLLAR_VOL": 5_000_000,
              "VOL_UP_LOOKBACK": 10, "VOL_UP_MULT": 1.2,
              "BUY_LOWER_BAND_ATR_MULT": 0.5, "BUY_UPPER_BAND_ATR_MULT": 0.25,
              "MIN_RR": 1.5, "DIV_MIN": 2
            },
            "conservative": {
              "ENABLE_4H": True, "ENFORCE_4H_ANCHORED_VWAP": True,
              "REGIME_SYMBOL": "SPY", "REGIME_DOWNGRADE_TO_WATCH": True,
              "MIN_20D_DOLLAR_VOL": 10_000_000,
              "VOL_UP_LOOKBACK": 12, "VOL_UP_MULT": 1.4,
              "BUY_LOWER_BAND_ATR_MULT": 0.75, "BUY_UPPER_BAND_ATR_MULT": 0.5,
              "MIN_RR": 2.0, "DIV_MIN": 3
            },
            "aggressive": {
              "ENABLE_4H": True, "ENFORCE_4H_ANCHORED_VWAP": False,
              "REGIME_SYMBOL": "SPY", "REGIME_DOWNGRADE_TO_WATCH": False,
              "MIN_20D_DOLLAR_VOL": 2_000_000,
              "VOL_UP_LOOKBACK": 8, "VOL_UP_MULT": 1.0,
              "BUY_LOWER_BAND_ATR_MULT": 0.4, "BUY_UPPER_BAND_ATR_MULT": 0.2,
              "MIN_RR": 1.2, "DIV_MIN": 1
            }
          }

          cfg = dict(presets.get(profile, presets["balanced"]))

          raw = (os.environ.get("ADVANCED_JSON","") or "").strip()
          if raw:
            try:
              user = json.loads(raw)
              if not isinstance(user, dict): raise ValueError("must be a JSON object")
              cfg.update(user)  # user overrides preset
            except Exception as e:
              print("Invalid ADVANCED_JSON:", e)
              sys.exit(1)

          # map JSON keys -> env var names the script reads
          mapping = {
            "ENABLE_4H": "IDE_ENABLE_4H",
            "ENFORCE_4H_ANCHORED_VWAP": "ENFORCE_4H_ANCHORED_VWAP",
            "REGIME_SYMBOL": "REGIME_SYMBOL",
            "REGIME_DOWNGRADE_TO_WATCH": "REGIME_DOWNGRADE_TO_WATCH",
            "MIN_20D_DOLLAR_VOL": "MIN_20D_DOLLAR_VOL",
            "VOL_UP_LOOKBACK": "VOL_UP_LOOKBACK",
            "VOL_UP_MULT": "VOL_UP_MULT",
            "BUY_LOWER_BAND_ATR_MULT": "BUY_LOWER_BAND_ATR_MULT",
            "BUY_UPPER_BAND_ATR_MULT": "BUY_UPPER_BAND_ATR_MULT",
            "MIN_RR": "MIN_RR",
            "DIV_MIN": "DIV_MIN",
          }

          def as_bool(v): return "true" if str(v).lower() in ("1","true","yes","on","y") else "false"

          with open(os.environ["GITHUB_ENV"], "a", encoding="utf-8") as f:
            for k, dst in mapping.items():
              if k in cfg:
                v = cfg[k]
                if isinstance(v, bool):
                  v = as_bool(v)
                f.write(f"{dst}={v}\n")

          # for debugging in logs:
          print("Effective profile:", profile)
          print("Effective config:", json.dumps(cfg, separators=(",",":")))
          PY

      - name: Run scanner
        env:
          # Telegram (set in repo Settings → Secrets → Actions)
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_CHAT_IDS:  ${{ secrets.TELEGRAM_CHAT_IDS }}

          # Behavior toggles
          MARKET_ONLY: ${{ inputs.RUN_AFTER_HOURS && 'false' || 'true' }}
          ALWAYS_NOTIFY: ${{ inputs.ALWAYS_NOTIFY && 'true' || 'false' }}
          TELEGRAM_PING_ON_START: ${{ inputs.PING_ON_START && 'true' || 'false' }}
          TELEGRAM_PING_ON_END:   ${{ inputs.PING_ON_END && 'true' || 'false' }}

          # Universe override — no symbol count limit here
          TICKERS: ${{ inputs.TICKERS }}
        run: |
          PYTHONUNBUFFERED=1 python scanner_dual_tf_vp_spyder_telegram_loop_dip4.py

      - name: Upload CSV + state as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scanner-output
          path: |
            scanner_dual_tf_vp.csv
            alerts_seen.json
