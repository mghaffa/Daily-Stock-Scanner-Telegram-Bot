name: Stock Scanner V2 (Telegram)

on:
  workflow_dispatch:
    inputs:
      RUN_AFTER_HOURS:
        type: boolean
        description: "Allow running outside US market hours?"
        default: false
      ALWAYS_NOTIFY:
        type: boolean
        description: "Send a summary even if there are no NEW alerts?"
        default: false
      PING_ON_START:
        type: boolean
        description: "Send a startup ping?"
        default: false
      PING_ON_END:
        type: boolean
        description: "Send a completion ping?"
        default: false
      TICKERS:
        type: string
        description: "Optional override list (comma/space/semicolon/pipe separated)"
        default: ""
      ADVANCED_JSON:
        type: string
        description: >
          Advanced knobs as JSON. Example:
          {"ENABLE_4H":true,"ENFORCE_4H_ANCHORED_VWAP":true,"REGIME_SYMBOL":"SPY",
           "REGIME_DOWNGRADE_TO_WATCH":true,"MIN_20D_DOLLAR_VOL":1000000,
           "VOL_UP_LOOKBACK":10,"VOL_UP_MULT":1.2,"BUY_LOWER_BAND_ATR_MULT":0.5,
           "BUY_UPPER_BAND_ATR_MULT":0.25,"MIN_RR":1.5,"DIV_MIN":2}
        default: ""
  # Every 50 minutes on weekdays (UTC)
  schedule:
    - cron: "*/50 * * * 1-5"

concurrency:
  group: stock-scanner
  cancel-in-progress: false

jobs:
  scan:
    runs-on: ubuntu-latest
    timeout-minutes: 12
    env:
      TZ: America/New_York
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy yfinance requests certifi
          fi

      # Default: skip runs outside US RTH unless user allows after-hours
      - name: Skip outside US RTH (unless overridden)
        run: |
          if [ "${{ inputs.RUN_AFTER_HOURS }}" != "true" ]; then
            now=$(TZ=America/New_York date +%H%M)
            dow=$(TZ=America/New_York date +%u)
            if [ "$dow" -ge 6 ] || [ "$now" -lt 0930 ] || [ "$now" -gt 1600 ]; then
              echo "Outside US RTH — exiting."
              exit 0
            fi
          fi

      # ---- EXPAND ADVANCED_JSON -> env (fixed heredoc) ----
      - name: Expand ADVANCED_JSON → env
        shell: bash
        env:
          ADVANCED_JSON: ${{ inputs.ADVANCED_JSON }}
        run: |
          python - <<'PY'
          import os, json, sys
          raw = os.environ.get("ADVANCED_JSON","").strip()
          if not raw:
              sys.exit(0)
          try:
              cfg = json.loads(raw)
          except Exception as e:
              print("Invalid ADVANCED_JSON:", e)
              sys.exit(1)

          def put(k, v):
              with open(os.environ["GITHUB_ENV"], "a", encoding="utf-8") as f:
                  f.write(f"{k}={v}\n")

          def norm_bool(x):
              return "true" if str(x).lower() in ("1","true","yes","y","on") else "false"

          # map JSON keys -> environment variables your script reads
          M = {
            "ENABLE_4H": "IDE_ENABLE_4H",
            "ENFORCE_4H_ANCHORED_VWAP": "ENFORCE_4H_ANCHORED_VWAP",
            "REGIME_SYMBOL": "REGIME_SYMBOL",
            "REGIME_DOWNGRADE_TO_WATCH": "REGIME_DOWNGRADE_TO_WATCH",
            "MIN_20D_DOLLAR_VOL": "MIN_20D_DOLLAR_VOL",
            "VOL_UP_LOOKBACK": "VOL_UP_LOOKBACK",
            "VOL_UP_MULT": "VOL_UP_MULT",
            "BUY_LOWER_BAND_ATR_MULT": "BUY_LOWER_BAND_ATR_MULT",
            "BUY_UPPER_BAND_ATR_MULT": "BUY_UPPER_BAND_ATR_MULT",
            "MIN_RR": "MIN_RR",
            "DIV_MIN": "DIV_MIN"
          }

          for src, dst in M.items():
              if src in cfg:
                  val = cfg[src]
                  if isinstance(val, bool):
                      val = norm_bool(val)
                  put(dst, val)
          PY

      - name: Run scanner
        env:
          # Telegram (set these in repo Settings → Secrets → Actions)
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_CHAT_IDS:  ${{ secrets.TELEGRAM_CHAT_IDS }}

          # Behavior toggles
          MARKET_ONLY: ${{ inputs.RUN_AFTER_HOURS && 'false' || 'true' }}
          ALWAYS_NOTIFY: ${{ inputs.ALWAYS_NOTIFY && 'true' || 'false' }}
          TELEGRAM_PING_ON_START: ${{ inputs.PING_ON_START && 'true' || 'false' }}
          TELEGRAM_PING_ON_END:   ${{ inputs.PING_ON_END && 'true' || 'false' }}

          # Universe override
          TICKERS: ${{ inputs.TICKERS }}
        run: |
          # Unbuffered output so you can see parsing logs immediately
          PYTHONUNBUFFERED=1 python scanner_dual_tf_vp_spyder_telegram_loop_dip3.py

      - name: Upload CSV + state as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scanner-output
          path: |
            scanner_dual_tf_vp.csv
            alerts_seen.json
