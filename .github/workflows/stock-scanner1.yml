name: Stock Scanner V2 (Telegram)

on:
  workflow_dispatch:
    inputs:
      RUN_AFTER_HOURS:
        type: boolean
        description: "Allow running outside US market hours?"
        default: false
      ALWAYS_NOTIFY:
        type: boolean
        description: "Send a summary even if there are no NEW alerts?"
        default: false
      PING_ON_START:
        type: boolean
        description: "Send a startup ping?"
        default: false
      PING_ON_END:
        type: boolean
        description: "Send a completion ping?"
        default: false

      # --- Universe / basic toggles ---
      TICKERS:
        type: string
        description: "Optional override list (comma/space/semicolon/pipe separated)"
        default: ""
      ENABLE_4H:
        type: boolean
        description: "Process 4H timeframe (used for entry timing/confidence)"
        default: true
      USE_AVWAP_4W_4H:
        type: boolean
        description: "Require 4H Close ≥ 4-week Anchored VWAP for entries"
        default: true
      REGIME_STRICT:
        type: boolean
        description: "Downgrade to WATCH if regime is weak"
        default: true
      MIN_DOLLAR_VOL:
        type: string
        description: "Min 20d $ volume (e.g. 10000000 = $10M)"
        default: "10000000"

      # --- Everything else goes here (JSON) ---
      # Example: {"REGIME_TICKER":"SPY","VOL_UP_LOOKBACK":10,"VOL_UP_MULT":1.2,"SWEET_ATR_LOW":0.5,"SWEET_ATR_HIGH":0.25,"RR_MIN":1.5,"DIV_MIN":2}
      ADVANCED_JSON:
        type: string
        description: "Advanced settings as JSON (see example in help text)"
        default: ""

  # Every 50 minutes on weekdays (UTC). Step below filters to US RTH by default.
  schedule:
    - cron: "*/50 * * * 1-5"

concurrency:
  group: stock-scanner
  cancel-in-progress: false

jobs:
  scan:
    runs-on: ubuntu-latest
    timeout-minutes: 12
    env:
      TZ: America/New_York
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy yfinance requests certifi urllib3
          fi

      # Default: skip runs outside US RTH unless user allows after-hours
      - name: Skip outside US RTH (unless overridden)
        run: |
          if [ "${{ inputs.RUN_AFTER_HOURS }}" != "true" ]; then
            now=$(TZ=America/New_York date +%H%M)
            dow=$(TZ=America/New_York date +%u)
            if [ "$dow" -ge 6 ] || [ "$now" -lt 0930 ] || [ "$now" -gt 1600 ]; then
              echo "Outside US RTH — exiting."
              exit 0
            fi
          fi

      - name: Expand ADVANCED_JSON → env
        env:
          ADVANCED_JSON: ${{ inputs.ADVANCED_JSON }}
        shell: bash
        run: |
          if [ -n "$ADVANCED_JSON" ]; then
            python - <<'PY'
            import os, json, sys
            j=os.environ.get("ADVANCED_JSON","").strip()
            if not j:
                sys.exit(0)
            try:
                cfg=json.loads(j)
            except Exception as e:
                print(f"::error::Invalid ADVANCED_JSON: {e}")
                sys.exit(1)
            def norm(v):
                if isinstance(v,bool): return "true" if v else "false"
                return str(v)
            with open(os.environ["GITHUB_ENV"], "a", encoding="utf-8") as f:
                for k,v in cfg.items():
                    k=str(k).strip()
                    if not k: continue
                    f.write(f"{k}={norm(v)}\n")
                    print(f"Exported {k}={norm(v)}")
            PY
          fi

      - name: Run scanner
        env:
          # --- Telegram secrets ---
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:  ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_CHAT_IDS: ${{ secrets.TELEGRAM_CHAT_IDS }}

          # --- Behavior toggles ---
          MARKET_ONLY: ${{ inputs.RUN_AFTER_HOURS && 'false' || 'true' }}
          ALWAYS_NOTIFY: ${{ inputs.ALWAYS_NOTIFY && 'true' || 'false' }}
          TELEGRAM_PING_ON_START: ${{ inputs.PING_ON_START && 'true' || 'false' }}
          TELEGRAM_PING_ON_END:   ${{ inputs.PING_ON_END && 'true' || 'false' }}

          # --- Core knobs directly mapped ---
          TICKERS:            ${{ inputs.TICKERS }}
          IDE_ENABLE_4H:      ${{ inputs.ENABLE_4H && 'true' || 'false' }}
          USE_AVWAP_4W_4H:    ${{ inputs.USE_AVWAP_4W_4H && 'true' || 'false' }}
          REGIME_STRICT:      ${{ inputs.REGIME_STRICT && 'true' || 'false' }}
          MIN_DOLLAR_VOL:     ${{ inputs.MIN_DOLLAR_VOL }}
          # The rest (REGIME_TICKER, VOL_UP_LOOKBACK, VOL_UP_MULT, SWEET_ATR_LOW/HIGH, RR_MIN, DIV_MIN, …)
          # come from ADVANCED_JSON via the previous step.
        run: |
          # If your file is named differently, adjust below:
          PYTHONUNBUFFERED=1 python scanner_dual_tf_vp_spyder_telegram_loop_dip3.py

      - name: Upload CSV + state as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scanner-output
          path: |
            scanner_dual_tf_vp.csv
            alerts_seen.json
